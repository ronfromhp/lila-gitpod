{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lichess Development on Gitpod You can use Gitpod (a free, online, VS Code-like IDE) for creating a development site of Lichess.org . With a single click, it will launch a workspace and automatically: Clone the necessary Lichess repositories Install all the dependencies Seed your database with test data Start a development site What do you need? A Github account A web browser (like Chrome or Firefox)","title":"Home"},{"location":"#lichess-development-on-gitpod","text":"You can use Gitpod (a free, online, VS Code-like IDE) for creating a development site of Lichess.org . With a single click, it will launch a workspace and automatically: Clone the necessary Lichess repositories Install all the dependencies Seed your database with test data Start a development site","title":"Lichess Development on Gitpod"},{"location":"#what-do-you-need","text":"A Github account A web browser (like Chrome or Firefox)","title":"What do you need?"},{"location":"api-testing/","text":"Consider using a lila-gitpod workspace while you develop your API integration before pointing to the production Lichess.org. Avoid getting rate-limited Don't worry about messing anything up If developing a bot, keep test games out of your bot's game history Bot Development Create your workspace Create an account for your bot Make port 8080 public, so you can access it from your bot's server Point your bot to use your workspace's development site instead of lichess.org Using lichess-bot If you're using the lichess-bot project, set the url value in config.yml to your development site.","title":"API Testing"},{"location":"api-testing/#bot-development","text":"Create your workspace Create an account for your bot Make port 8080 public, so you can access it from your bot's server Point your bot to use your workspace's development site instead of lichess.org Using lichess-bot If you're using the lichess-bot project, set the url value in config.yml to your development site.","title":"Bot Development"},{"location":"contributing/","text":"Contributing Your Changes Format your code Before submitting any pull requests, run the linters: sbt scalafmtAll pnpm run format Submitting a Pull Request If you make code changes, you can submit a Pull Request directly from your workspace. Using the Source Control menu, you can create a branch and commit your files. Then using the Github menu, you can submit a Pull Request.","title":"Contributing"},{"location":"contributing/#contributing-your-changes","text":"","title":"Contributing Your Changes"},{"location":"contributing/#format-your-code","text":"Before submitting any pull requests, run the linters: sbt scalafmtAll pnpm run format","title":"Format your code"},{"location":"contributing/#submitting-a-pull-request","text":"If you make code changes, you can submit a Pull Request directly from your workspace. Using the Source Control menu, you can create a branch and commit your files. Then using the Github menu, you can submit a Pull Request.","title":"Submitting a Pull Request"},{"location":"development/","text":"Working with Lila What is lila? Lichess is primarily written in the Scala programming language. The name for the main Lichess codebase is \"lila\", which stands for \" Li chess in Sca la \". Navigating the code The main Lichess code repositories have automatically been added to your workspace. You can find them at: ls /workspace To open them in your workspace: open -r /workspace/lila # open main lila repository open -r /workspace/lila-ws # open websocket repository Recompiling lila When you edit a scala file, you'll have to restart bloop . Go to the lila terminal, type Ctrl+c to stop the running process, then rerun: bloop run lila -m lila.app.Lila Bloop will detect any changed files, recompile them, then start lila. Recompiling frontend assets If you're working on TypeScript or SCSS files, ./ui/build -w will automatically detect the changes and recompile the assets. You can see the output in the ui terminal. Updating Routes If you edit the conf/routes file, you'll need to update the route cache. Bloop will not automatically detect changes to this file. Stop lila (see Recompiling lila above), then run: cd /workspace/lila ./lila playRoutes","title":"Working with Lila"},{"location":"development/#working-with-lila","text":"What is lila? Lichess is primarily written in the Scala programming language. The name for the main Lichess codebase is \"lila\", which stands for \" Li chess in Sca la \".","title":"Working with Lila"},{"location":"development/#navigating-the-code","text":"The main Lichess code repositories have automatically been added to your workspace. You can find them at: ls /workspace To open them in your workspace: open -r /workspace/lila # open main lila repository open -r /workspace/lila-ws # open websocket repository","title":"Navigating the code"},{"location":"development/#recompiling-lila","text":"When you edit a scala file, you'll have to restart bloop . Go to the lila terminal, type Ctrl+c to stop the running process, then rerun: bloop run lila -m lila.app.Lila Bloop will detect any changed files, recompile them, then start lila.","title":"Recompiling lila"},{"location":"development/#recompiling-frontend-assets","text":"If you're working on TypeScript or SCSS files, ./ui/build -w will automatically detect the changes and recompile the assets. You can see the output in the ui terminal.","title":"Recompiling frontend assets"},{"location":"development/#updating-routes","text":"If you edit the conf/routes file, you'll need to update the route cache. Bloop will not automatically detect changes to this file. Stop lila (see Recompiling lila above), then run: cd /workspace/lila ./lila playRoutes","title":"Updating Routes"},{"location":"email-development/","text":"Email Development Lichess sends various emails (welcome, password reset, move notifiations for correspondence games, etc). By default, any emails from your development site will not really be sent, and only show in the logs of the lila terminal. If you're working on emails, you may find it helpful to use MailHog to debug them and get a more inbox-type view where you can see the rendered HTML emails. Append these 2 lines to /workspace/lila/conf/application.conf : mailer.primary.mock = false mailer.primary.tls = false Restart lila to apply the config changes (see Recompiling lila ) Then start MailHog: go get github.com/mailhog/MailHog sudo ~/go/bin/MailHog -smtp-bind-addr 0.0.0.0:587 When you trigger an email to be sent, it will now show in the MailHog UI which is available at the URL when you type gp url 8025 in a terminal.","title":"Email Development"},{"location":"email-development/#email-development","text":"Lichess sends various emails (welcome, password reset, move notifiations for correspondence games, etc). By default, any emails from your development site will not really be sent, and only show in the logs of the lila terminal. If you're working on emails, you may find it helpful to use MailHog to debug them and get a more inbox-type view where you can see the rendered HTML emails. Append these 2 lines to /workspace/lila/conf/application.conf : mailer.primary.mock = false mailer.primary.tls = false Restart lila to apply the config changes (see Recompiling lila ) Then start MailHog: go get github.com/mailhog/MailHog sudo ~/go/bin/MailHog -smtp-bind-addr 0.0.0.0:587 When you trigger an email to be sent, it will now show in the MailHog UI which is available at the URL when you type gp url 8025 in a terminal.","title":"Email Development"},{"location":"extensions/","text":"You can install extensions within your workspace to make development easier. Browse and add them in the Extensions menu to the left of your workspace. These are a couple that might be helpful: MongoDB for VSCode This extension will let you browse your local Mongo database to see its structure and data. Use connection string: mongodb://localhost Scala Metals Metals is a Scala language server that provides rich IDE features. If you're working with Scala files, it can be helpful for: Definitions/signatures on hover Autocomplete parameter hints Finding references","title":"Extensions"},{"location":"extensions/#mongodb-for-vscode","text":"This extension will let you browse your local Mongo database to see its structure and data. Use connection string: mongodb://localhost","title":"MongoDB for VSCode"},{"location":"extensions/#scala-metals","text":"Metals is a Scala language server that provides rich IDE features. If you're working with Scala files, it can be helpful for: Definitions/signatures on hover Autocomplete parameter hints Finding references","title":"Scala Metals"},{"location":"external-engine/","text":"The broker for external engine has its own service and port (9666). It must be started separately if you wish to use it. cd /workspace/lila-engine LILA_ENGINE_LOG=lila_engine=debug,tower_http=debug cargo run -- --bind 127.0.0.1:9666","title":"External Engine"},{"location":"getting-started/","text":"Getting Started Click here to start a workspace: It will take about 8-10 minutes. You can watch the progress in the 3 terminal windows that automatically open. Your Development Site To get the URL for your development site, in a new terminal, type: gp url 8080 Once lila is running, your dev site will be available. You can check the status on the PORTS tab above your terminal. Test accounts Your database is preloaded with a number of test accounts: lichess / password ROLE_SUPER_ADMIN admin / password ROLE_ADMIN bobby / password mary / password To see all other test accounts (admins, titled accounts, flagged accounts, bots, etc): mongosh lichess --quiet --file /workspace/lila-gitpod/scripts/mongodb/users.js Stopping Your Workspace Done for the day or make a mistake and want to start over? No problem. gp stop Or just leave it and it'll shut down when it's been idle for 30 minutes.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Click here to start a workspace: It will take about 8-10 minutes. You can watch the progress in the 3 terminal windows that automatically open.","title":"Getting Started"},{"location":"getting-started/#your-development-site","text":"To get the URL for your development site, in a new terminal, type: gp url 8080 Once lila is running, your dev site will be available. You can check the status on the PORTS tab above your terminal.","title":"Your Development Site"},{"location":"getting-started/#test-accounts","text":"Your database is preloaded with a number of test accounts: lichess / password ROLE_SUPER_ADMIN admin / password ROLE_ADMIN bobby / password mary / password To see all other test accounts (admins, titled accounts, flagged accounts, bots, etc): mongosh lichess --quiet --file /workspace/lila-gitpod/scripts/mongodb/users.js","title":"Test accounts"},{"location":"getting-started/#stopping-your-workspace","text":"Done for the day or make a mistake and want to start over? No problem. gp stop Or just leave it and it'll shut down when it's been idle for 30 minutes.","title":"Stopping Your Workspace"},{"location":"lilaisms/","text":"Lilaisms See the wiki For notes on how lila uses Scala, see the wiki page: Lilaisms","title":"Lilaisms"},{"location":"lilaisms/#lilaisms","text":"See the wiki For notes on how lila uses Scala, see the wiki page: Lilaisms","title":"Lilaisms"},{"location":"other-resources/","text":"Other Resources Information on Contributing to Lichess An explanation of the Lichess repositories, services, architecture Gitpod documentation Lichess API docs Lichess.org Discord server (See #lichess-dev-onboarding for help) If you prefer to setup your development environment locally, check out the wiki's onboarding instructions .","title":"Other Resources"},{"location":"other-resources/#other-resources","text":"Information on Contributing to Lichess An explanation of the Lichess repositories, services, architecture Gitpod documentation Lichess API docs Lichess.org Discord server (See #lichess-dev-onboarding for help) If you prefer to setup your development environment locally, check out the wiki's onboarding instructions .","title":"Other Resources"},{"location":"sharing/","text":"Sharing Making your development site public By default, your Lichess dev site is only accessible by you. If you want to make it available to others or if you're developing an API client application, you can make port 8080 public. Click the PORTS tab above your terminal, then change the port visibility to public for 8080 . You can keep the others private. Attention Your workspace will automatically stop after you've been idle for 30 minutes, at which point your URL will return an error. Collaborating It is also possible to share your workspace to work on the same code with someone else. See Gitpod's documentation for more on sharing a running workspace .","title":"Sharing"},{"location":"sharing/#sharing","text":"","title":"Sharing"},{"location":"sharing/#making-your-development-site-public","text":"By default, your Lichess dev site is only accessible by you. If you want to make it available to others or if you're developing an API client application, you can make port 8080 public. Click the PORTS tab above your terminal, then change the port visibility to public for 8080 . You can keep the others private. Attention Your workspace will automatically stop after you've been idle for 30 minutes, at which point your URL will return an error.","title":"Making your development site public"},{"location":"sharing/#collaborating","text":"It is also possible to share your workspace to work on the same code with someone else. See Gitpod's documentation for more on sharing a running workspace .","title":"Collaborating"},{"location":"stockfish/","text":"Using Stockfish The Stockfish engine is used for a couple of things within lila: \"Request a Computer Analysis\" for post-game analysis \"Play with the Computer\" Instructions Compile the fishnet client: cd /workspace/fishnet/ cargo build For \"Request a Computer Analysis\" , connect Fishnet to port 9663: cargo run -- --endpoint http://localhost:9663/fishnet/ --max-backoff 1s For \"Play with the Computer\" , start the lila-fishnet service: cd /workspace/lila-fishnet/ sbt run -Dhttp.port=9665 Then, connect Fishnet to port 9665. In a separate terminal: cd /workspace/fishnet/ cargo run -- --endpoint http://localhost:9665/fishnet/ --max-backoff 1s","title":"Using Stockfish"},{"location":"stockfish/#using-stockfish","text":"The Stockfish engine is used for a couple of things within lila: \"Request a Computer Analysis\" for post-game analysis \"Play with the Computer\"","title":"Using Stockfish"},{"location":"stockfish/#instructions","text":"Compile the fishnet client: cd /workspace/fishnet/ cargo build For \"Request a Computer Analysis\" , connect Fishnet to port 9663: cargo run -- --endpoint http://localhost:9663/fishnet/ --max-backoff 1s For \"Play with the Computer\" , start the lila-fishnet service: cd /workspace/lila-fishnet/ sbt run -Dhttp.port=9665 Then, connect Fishnet to port 9665. In a separate terminal: cd /workspace/fishnet/ cargo run -- --endpoint http://localhost:9665/fishnet/ --max-backoff 1s","title":"Instructions"}]}